<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lhzlg3368.github.io</id>
    <title>JesseHuan</title>
    <updated>2020-03-22T09:55:40.869Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lhzlg3368.github.io"/>
    <link rel="self" href="https://lhzlg3368.github.io/atom.xml"/>
    <subtitle>JesseHuan</subtitle>
    <logo>https://lhzlg3368.github.io/images/avatar.png</logo>
    <icon>https://lhzlg3368.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, JesseHuan</rights>
    <entry>
        <title type="html"><![CDATA[健身计划（2020年3月22-3月28日）]]></title>
        <id>https://lhzlg3368.github.io/CgYbAGm5f/</id>
        <link href="https://lhzlg3368.github.io/CgYbAGm5f/">
        </link>
        <updated>2020-03-22T09:33:27.000Z</updated>
        <summary type="html"><![CDATA[<ol>
<li>今天晚上吃一半鸡胸肉加西兰花，做20个俯卧撑4组</li>
<li>23日早上吃两个煮鸡蛋和鸡胸肉，晚上做20个俯卧撑4组，加坚果酸奶一杯</li>
<li>24日早上吃两个煮鸡蛋加坚果酸奶一杯，晚上做20个俯卧撑4组，加坚果酸奶一杯<br>
连续训练两天奖励晚上买鸡胸肉</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<ol>
<li>今天晚上吃一半鸡胸肉加西兰花，做20个俯卧撑4组</li>
<li>23日早上吃两个煮鸡蛋和鸡胸肉，晚上做20个俯卧撑4组，加坚果酸奶一杯</li>
<li>24日早上吃两个煮鸡蛋加坚果酸奶一杯，晚上做20个俯卧撑4组，加坚果酸奶一杯<br>
连续训练两天奖励晚上买鸡胸肉</li>
</ol>
<!-- more -->
<ol start="4">
<li>25日早上吃两个煮鸡和鸡胸肉，晚上做20个俯卧撑4组，加鸡胸肉一杯</li>
<li>26日早上吃两个煮鸡和鸡胸肉，晚上做20个俯卧撑4组，加鸡胸肉一杯</li>
<li>27日早上吃两个煮鸡和酸奶坚果，晚上做20个俯卧撑4组，加鸡胸肉一杯<br>
连续训练训练五天晚上奖励买一块牛排煎来吃</li>
<li>28日清帐总结</li>
</ol>
<p>每次完成计划点则更新并记录</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-CyclieBarrier循环栅栏，闭锁CountDownLatch]]></title>
        <id>https://lhzlg3368.github.io/YUKvS__4A/</id>
        <link href="https://lhzlg3368.github.io/YUKvS__4A/">
        </link>
        <updated>2020-03-21T06:46:57.000Z</updated>
        <summary type="html"><![CDATA[<p>CyclieBarrier是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点。因为为该barrier在释放等待线程后可以重用，所以称它为循环的barrier。</p>
]]></summary>
        <content type="html"><![CDATA[<p>CyclieBarrier是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点。因为为该barrier在释放等待线程后可以重用，所以称它为循环的barrier。</p>
<!-- more -->
<pre><code>package app;

import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

public class App {
    private static final int SIZE = 5;
    private static CyclicBarrier mCyclicBarrier;

    public static void main(String[] args) throws Exception {
        mCyclicBarrier = new CyclicBarrier(SIZE, new Runnable() {

            @Override
            public void run() {
                System.out.println(&quot;----&gt; 满足条件，执行特定条件 &quot; + mCyclicBarrier.getParties());
            }
        });

        for (int i = 0; i &lt; SIZE; i++) {
            new WorkerThread().start();
        }
    }

    static class WorkerThread extends Thread {
        @Override
        public void run() {
            // TODO Auto-generated method stub
            super.run();
            try {
                System.out.println(Thread.currentThread().getName() + &quot; 等待CyclicBarrier&quot;);
                // 将CyclicBarrier的参与者数量+1
                mCyclicBarrier.await();
                System.out.println(Thread.currentThread().getName() + &quot; 继续执行&quot;);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (BrokenBarrierException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
}
</code></pre>
<p>执行结果</p>
<pre><code>Thread-0 等待CyclicBarrier
Thread-3 等待CyclicBarrier
Thread-2 等待CyclicBarrier
Thread-1 等待CyclicBarrier
Thread-4 等待CyclicBarrier
----&gt; 满足条件，执行特定条件 5
Thread-4 继续执行
Thread-0 继续执行
Thread-1 继续执行
Thread-2 继续执行
Thread-3 继续执行
</code></pre>
<hr>
<p>CountDownLatch也是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待，直到条件被满足。</p>
<pre><code>package app;

import java.util.concurrent.CountDownLatch;

public class App {
    public static final int SIZE = 5;

    public static void main(String[] args) throws Exception {
        CountDownLatch mCountDownLatch = new CountDownLatch(SIZE);
        // 新建任务
        for (int i = 0; i &lt; SIZE; i++) {
            new WorkerThread(mCountDownLatch).start();
        }
        // 主线程 等待线程池中的5个任务完成
        System.out.println(&quot;主线程等待&quot;);
        mCountDownLatch.await();
        System.out.println(&quot;主线程继续执行&quot;);
    }

    static class WorkerThread extends Thread {
        private CountDownLatch latch;

        public WorkerThread(CountDownLatch latch) {
            this.latch = latch;
        }

        @Override
        public void run() {
            // TODO Auto-generated method stub
            super.run();
            try {
                Thread.sleep(1000);
                System.out.println(Thread.currentThread().getName() + &quot; 执行操作.&quot;);
                // 将CountDownLatch的数值-1
                latch.countDown();
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
}
</code></pre>
<p>执行结果</p>
<pre><code>主线程等待
Thread-0 执行操作.
Thread-1 执行操作.
Thread-2 执行操作.
Thread-3 执行操作.
Thread-4 执行操作.
主线程继续执行
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker 阿里云镜像加速度]]></title>
        <id>https://lhzlg3368.github.io/clHsvKw8k/</id>
        <link href="https://lhzlg3368.github.io/clHsvKw8k/">
        </link>
        <updated>2020-03-21T06:22:23.000Z</updated>
        <content type="html"><![CDATA[<p>在Ubuntu下</p>
<ol>
<li>
<p>安装／升级Docker客户端<br>
推荐安装1.10.0以上版本的Docker客户端</p>
</li>
<li>
<p>配置镜像加速器<br>
针对Docker客户端版本大于 1.10.0 的用户</p>
</li>
</ol>
<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<pre><code>sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;登录阿里云填写你的地址&quot;]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
</code></pre>
<p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">链接-阿里云容器镜像服务-my</a></p>
]]></content>
    </entry>
</feed>